---
import Pagination from "@/components/pagination.component.astro";
import Summary from "@/components/summary.component.astro";
import BaseLayout from "@/layouts/base.layout.astro";
import { slugify } from "@/utils";
import { Site } from "@/config";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { getCollection } from "astro:content";

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection("posts");

  const uniqueTags: string[] = [
    ...new Set(
      posts
        .map((post) => post.data.tags || [])
        .flat()
        .filter(Boolean),
    ),
  ];

  // For every tag, return a paginate() result.
  // Make sure that you pass `{params: {tag}}` to `paginate()`
  // so that Astro knows which tag grouping the result is for.
  return uniqueTags.flatMap((tag) => {
    const slug = slugify(tag);

    const filteredPosts = posts
      .filter((post) => !post.data.isDraft)
      .filter((post) =>
        post.data.tags?.map((item) => slugify(item))?.includes(slug),
      )
      .sort(
        (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf(),
      );

    return paginate(filteredPosts, {
      params: { tag: slug },
      props: {
        tag,
      },
      pageSize: Site.paginationPageSize,
    });
  });
}) satisfies GetStaticPaths;

const { page, tag } = Astro.props;

const { lastPage } = page;
---

<BaseLayout
  meta={{
    title: `#${tag}`,
  }}
>
  <div class="flex-grow p-4">
    <div class="mx-auto my-16 max-w-3xl text-center">
      <h1 class="text-4xl font-bold lg:text-6xl">#{tag}</h1>
    </div>

    <div class="mx-auto max-w-3xl">
      <div class="flex flex-col gap-16">
        {page.data.map((post) => <Summary post={post} />)}

        {lastPage > 1 && <Pagination {...page} />}
      </div>
    </div>
  </div>
</BaseLayout>
